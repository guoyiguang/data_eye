import { useState, useRef, useCallback, useImperativeHandle, useEffect } from 'react';
import { o as observerDomResize, d as debounce } from './index-4a2cc4f9.js';
import { s as slicedToArray, _ as _extends } from './_babelHelpers-a63acad8.js';

function useAutoResize(ref) {
  var _useState = useState({ width: 0, height: 0 }),
      _useState2 = slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var domRef = useRef(null);

  var setWH = useCallback(function () {
    var _domRef$current = domRef.current,
        clientWidth = _domRef$current.clientWidth,
        clientHeight = _domRef$current.clientHeight;


    setState({ width: clientWidth, height: clientHeight });
  }, []);

  useImperativeHandle(ref, function () {
    return { setWH: setWH };
  }, []);

  useEffect(function () {
    var debounceSetWHFun = debounce(setWH, 100);

    debounceSetWHFun();

    var domObserver = observerDomResize(domRef.current, debounceSetWHFun);

    window.addEventListener('resize', debounceSetWHFun);

    return function () {
      domObserver.disconnect();
      domObserver.takeRecords();

      window.removeEventListener('resize', debounceSetWHFun);
    };
  }, []);

  return _extends({}, state, { domRef: domRef, setWH: setWH });
}

export { useAutoResize as u };
//# sourceMappingURL=autoResize-552ea4b4.js.map
