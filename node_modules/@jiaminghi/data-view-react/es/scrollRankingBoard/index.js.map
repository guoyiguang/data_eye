{"version":3,"file":"index.js","sources":["../../src/components/scrollRankingBoard/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useMemo, forwardRef } from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport classnames from 'classnames'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport useAutoResize from '../../use/autoResize'\nimport { co } from '../../util'\n\nimport './style.less'\n\nconst defaultConfig = {\n  /**\n   * @description Board data\n   * @type {Array<Object>}\n   * @default data = []\n   */\n  data: [],\n  /**\n   * @description Row num\n   * @type {Number}\n   * @default rowNum = 5\n   */\n  rowNum: 5,\n  /**\n   * @description Scroll wait time\n   * @type {Number}\n   * @default waitTime = 2000\n   */\n  waitTime: 2000,\n  /**\n   * @description Carousel type\n   * @type {String}\n   * @default carousel = 'single'\n   * @example carousel = 'single' | 'page'\n   */\n  carousel: 'single',\n  /**\n   * @description Value unit\n   * @type {String}\n   * @default unit = ''\n   * @example unit = 'ton'\n   */\n  unit: '',\n  /**\n   * @description Auto sort by value\n   * @type {Boolean}\n   * @default sort = true\n   */\n  sort: true\n}\n\nfunction calcRows({ data, rowNum, sort }) {\n  sort && data.sort(({ value: a }, { value: b }) => {\n    if (a > b) return -1\n    if (a < b) return 1\n    if (a === b) return 0\n  })\n\n  const value = data.map(({ value }) => value)\n\n  const max = Math.max(...value) || 0\n\n  data = data.map((row, i) => ({\n    ...row,\n    ranking: i + 1,\n    percent: (row.value / max) * 100\n  }))\n\n  const rowLength = data.length\n\n  if (rowLength > rowNum && rowLength < 2 * rowNum) {\n    data = [...data, ...data]\n  }\n\n  data = data.map((d, i) => ({ ...d, scroll: i }))\n\n  return data\n}\n\nconst ScrollRankingBoard = forwardRef(({ config, className, style }, ref) => {\n  const { width, height, domRef } = useAutoResize(ref)\n\n  const [state, setState] = useState({\n    mergedConfig: null,\n\n    rows: [],\n\n    heights: []\n  })\n\n  const { mergedConfig, rows, heights } = state\n\n  const stateRef = useRef({\n    ...state,\n    rowsData: [],\n    avgHeight: 0,\n    animationIndex: 0\n  })\n\n  const heightRef = useRef(height)\n\n  Object.assign(stateRef.current, state)\n\n  function onResize(onresize = false) {\n    if (!mergedConfig) return\n\n    const heights = calcHeights(mergedConfig, onresize)\n\n    if (heights !== undefined) {\n      Object.assign(stateRef.current, { heights })\n      setState(state => ({ ...state, heights }))\n    }\n  }\n\n  function calcData() {\n    const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n\n    const rows = calcRows(mergedConfig)\n\n    const heights = calcHeights(mergedConfig)\n\n    const data = { mergedConfig, rows }\n\n    heights !== undefined && Object.assign(data, { heights })\n\n    Object.assign(stateRef.current, data, { rowsData: rows, animationIndex: 0 })\n\n    setState(state => ({ ...state, ...data }))\n  }\n\n  function calcHeights({ rowNum, data }, onresize = false) {\n    const avgHeight = height / rowNum\n\n    Object.assign(stateRef.current, { avgHeight })\n\n    if (!onresize) {\n      return new Array(data.length).fill(avgHeight)\n    }\n  }\n\n  function * animation(start = false) {\n    let {\n      avgHeight,\n      animationIndex,\n      mergedConfig: { waitTime, carousel, rowNum },\n      rowsData\n    } = stateRef.current\n\n    const rowLength = rowsData.length\n\n    if (start) yield new Promise(resolve => setTimeout(resolve, waitTime))\n\n    const animationNum = carousel === 'single' ? 1 : rowNum\n\n    let rows = rowsData.slice(animationIndex)\n    rows.push(...rowsData.slice(0, animationIndex))\n\n    const heights = new Array(rowLength).fill(avgHeight)\n    setState(state => ({ ...state, rows, heights }))\n\n    yield new Promise(resolve => setTimeout(resolve, 300))\n\n    animationIndex += animationNum\n\n    const back = animationIndex - rowLength\n    if (back >= 0) animationIndex = back\n\n    const newHeights = [...heights]\n    newHeights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n    Object.assign(stateRef.current, { animationIndex })\n    setState(state => ({ ...state, heights: newHeights }))\n  }\n\n  useEffect(() => {\n    calcData()\n\n    let start = true\n\n    function * loop() {\n      while (true) {\n        yield * animation(start)\n\n        start = false\n\n        const { waitTime } = stateRef.current.mergedConfig\n\n        yield new Promise(resolve => setTimeout(resolve, waitTime - 300))\n      }\n    }\n\n    const {\n      mergedConfig: { rowNum },\n      rows: rowsData\n    } = stateRef.current\n\n    const rowLength = rowsData.length\n\n    if (rowNum >= rowLength) return\n\n    return co(loop)\n  }, [config, domRef.current])\n\n  useEffect(() => {\n    if (heightRef.current === 0 && height !== 0) {\n      onResize()\n\n      heightRef.current = height\n    } else {\n      onResize(true)\n    }\n  }, [width, height, domRef.current])\n\n  const classNames = useMemo(\n    () => classnames('dv-scroll-ranking-board', className),\n    [className]\n  )\n\n  return (\n    <div className={classNames} style={style} ref={domRef}>\n      {rows.map((item, i) => (\n        <div\n          className='row-item'\n          key={item.toString() + item.scroll}\n          style={{ height: `${heights[i]}px` }}\n        >\n          <div className='ranking-info'>\n            <div className='rank'>No.{item.ranking}</div>\n            <div className='info-name' dangerouslySetInnerHTML={{ __html: item.name }} />\n            <div className='ranking-value'>\n              {item.value + mergedConfig.unit}\n            </div>\n          </div>\n\n          <div className='ranking-column'>\n            <div\n              className='inside-column'\n              style={{ width: `${item.percent}%` }}\n            >\n              <div className='shine' />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n})\n\nScrollRankingBoard.propTypes = {\n  config: PropTypes.object,\n  className: PropTypes.string,\n  style: PropTypes.object\n}\n\n// 指定 props 的默认值：\nScrollRankingBoard.defaultProps = {\n  config: {}\n}\n\nexport default ScrollRankingBoard\n"],"names":["defaultConfig","data","rowNum","waitTime","carousel","unit","sort","calcRows","a","value","b","map","max","Math","row","i","ranking","percent","rowLength","length","d","scroll","ScrollRankingBoard","forwardRef","ref","config","className","style","animation","useAutoResize","width","height","domRef","useState","mergedConfig","rows","heights","state","setState","stateRef","useRef","rowsData","avgHeight","animationIndex","heightRef","Object","assign","current","onResize","onresize","calcHeights","undefined","calcData","deepMerge","deepClone","Array","fill","start","Promise","setTimeout","resolve","animationNum","slice","push","back","newHeights","splice","useEffect","loop","co","classNames","useMemo","classnames","item","toString","__html","name","propTypes","PropTypes","object","string","defaultProps"],"mappings":"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"}